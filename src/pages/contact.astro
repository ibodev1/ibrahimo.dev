---
import Layout from '@/layouts/Default.astro';
import Heading from '@/components/Heading.astro';
import FormInput from '@/components/FormInput.astro';
---

<Layout title="Contact">
  <section class="p-6">
    <Heading>Contact Me ðŸ’¬</Heading>
    <form action="/api/contact" method="POST" class="mt-4" id="contact-form">
      <div
        id="success-alert"
        class="hidden bg-emerald-500 bg-opacity-50 text-white border-2 border-emerald-500 rounded-md py-2 px-4 mb-2"
      >
      </div>
      <div
        id="error-alert"
        class="hidden bg-red-500 bg-opacity-50 text-white border-2 border-red-500 rounded-md py-2 px-4 mb-2"
      >
      </div>
      <div class="flex items-center justify-between gap-2 mb-2">
        <FormInput name="name" placeholder="Name" />
        <FormInput name="surname" placeholder="Surname" />
      </div>
      <div class="mb-2">
        <FormInput type="email" name="email" placeholder="Email" />
      </div>
      <div class="mb-2">
        <FormInput name="subject" placeholder="Subject" />
      </div>
      <div class="mb-2">
        <label for="message" class="mb-1">Message</label>
        <textarea
          name="message"
          id="message"
          placeholder="Message"
          required
          class="w-full border border-primary text-black rounded-md w-100 flex-1 py-2 px-4 outline-none h-36 max-h-44 min-h-36"
        ></textarea>
      </div>
      <button
        type="submit"
        class="bg-primary text-light py-2 px-4 rounded-lg font-semibold hover:bg-primary-600 active:bg-primary-700 transition-all"
        id="submit-btn">Submit</button
      >
    </form>
  </section>
</Layout>

<script>
  // Use type assertion for more specific element types
  const contactForm = document.querySelector('#contact-form') as HTMLFormElement;
  const successAlertElm = document.querySelector('#success-alert') as HTMLElement;
  const errorAlertElm = document.querySelector('#error-alert') as HTMLElement;
  const submitBtn = document.querySelector('#submit-btn') as HTMLButtonElement;

  if (contactForm && successAlertElm && errorAlertElm && submitBtn) {
    contactForm.addEventListener('submit', (e: Event) => e.preventDefault());

    submitBtn.addEventListener('click', async (e: Event) => {
      e.preventDefault();

      try {
        if (!contactForm.reportValidity()) return;

        const formData = new FormData(contactForm);
        const response = await fetch('/api/contact', {
          method: 'POST',
          body: formData,
          headers: {
            'Accept': 'application/json',
          },
        });

        const { message = response.ok ? 'Success!' : 'A problem has occurred' } = await response.json();

        successAlertElm.classList.toggle('hidden', !response.ok);
        errorAlertElm.classList.toggle('hidden', response.ok);

        (response.ok ? successAlertElm : errorAlertElm).textContent = message;
      } catch (error) {
        console.error('Form submission error:', error);
        errorAlertElm.classList.remove('hidden');
        successAlertElm.classList.add('hidden');
        errorAlertElm.textContent = error instanceof Error ? error.message : 'An unexpected error occurred';
      }
    });
  } else {
    console.warn('One or more required elements are missing from the DOM');
  }
</script>
